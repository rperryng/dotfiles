# Autoload -Uz compinit
# compinit

# {{{ One time installs
# brew install
# ripgrep
# nnn
# rbenv - rbenv-default-gems - solargraph
# nodenv
# pyenv

# http://www.rushiagr.com/blog/2016/06/16/everything-you-need-to-know-about-tmux-copy-pasting-ubuntu/
# https://github.com/dmarcotte/easy-move-resize
# https://github.com/BurntSushi/ripgrep
# https://github.com/jarun/nnn
# https://github.com/rbenv/rbenv
# https://github.com/rupa/z
# https://github.com/scmbreeze/scm_breeze
# https://github.com/tpope/gem-ctags
# https://github.com/tpope/rbenv-ctags
# https://github.com/nodenv/nodenv-default-packages
# https://github.com/nodenv/nodenv-aliases
# https://github.com/zsh-users/zsh-autosuggestions
# https://github.com/zsh-users/zsh-syntax-highlighting
# https://github.com/sharkdp/bat

# Enable esc+ to treat option keys as alt
# https://github.com/junegunn/fzf.vim/issues/54#issuecomment-350417085
# }}}
# {{{ XDG
mkdir -p "$HOME/.config"
mkdir -p "$HOME/.cache"
# }}}
# {{{ History
# Immediately append to the history file, not just when a term is killed# Base16
setopt    sharehistory
# Share history across terminals
setopt    appendhistory
# Append history to the history file (no overwriting)
setopt    incappendhistory

HISTSIZE=5000               # How many lines of history to keep in memory
HISTFILE=~/.zsh_history     # Where to save history to disk
SAVEHIST=5000               # Number of history entries to save to disk
HISTDUP=erase               # Erase duplicates in the history file
# }}}
# {{{ Colours
export BAT_THEME='gruvbox-dark-hard'
# export BAT_THEME='gruvbox-light'
# }}}
# {{{ $EDITOR
# Use neovim remote terminal if available
if [ -n "$NVIM_LISTEN_ADDRESS" ]; then
  export VISUAL="nvr --remote-wait +'setlocal bufhidden=wipe'"
  alias nvim="nvr"
  alias n="nvr"
  alias nnstart="echo 'Already in a neovim session'"
else
  export VISUAL=nvim
  alias nv="nvim"
  alias n="nvim"
  alias nnstart="clear; nvim +'call NNStart()'"
fi

export EDITOR="$VISUAL"
# }}}
# {{{ GitHub
if command -v gh &> /dev/null; then
  clone() {
    cat "${HOME}/.cache/clone_urls.txt" | \
      fzf --multi | \
      xargs -I{} git -C "$HOME/code" clone {}

    gh api /user/repos --paginate | \
      jq -r '.[] | .ssh_url' > \
      "${HOME}/.cache/clone_urls.txt" &
  }
fi

# When enter starts inputting ^M...
alias pls="stty sane"

# Open the PR page for the current branch.
function gh_openpr() {
  if gh pr view --json url; then
    gh pr view --web
  else
    gh pr create --web
  fi
}

alias open-pr="gh_openpr"

# gh cli aliases
alias ghrw="gh run watch -i1"
alias ghrvw="gh run view --web"
alias ghprvw="gh pr view --web"

if [[ "$(uname)" == "Darwin" ]]; then
  function ghrws() {
    local folder_name
    local msg
    folder_name=$(basename "$PWD")
    gh run watch && \
      osx_notify "GitHub Actions" "Done workflow for ${folder_name}" && \
      say "Done workflow for ${folder_name}"
  }
fi

# }}}
# {{{ Aliases, Functions
alias rm-swap="rm ~/.local/share/nvim/swap/*"
alias rm_postgres_lockfile="rm /usr/local/var/postgres/postmaster.pid"
alias be="bundle exec"
alias migrate="bundle exec rake db:migrate && RACK_ENV=test bundle exec rake db:migrate"
alias rollback="bundle exec rake db:rollback && RACK_ENV=test bundle exec rake db:rollback"
alias db-rebuild="git checkout master -- db/schema.rb && bundle exec rake db:drop db:create db:migrate && RACK_ENV=test bundle exec rake db:migrate"

# Jump to repository root
alias cdp='cd $(git rev-parse --show-toplevel)'

alias yarn-linked="find . -type l | grep -v .bin | sed 's/^\.\/node_modules\///'"
alias yarn-unlink-all="yarn-linked | grep -v 'puppeteer' | xargs yarn unlink && yarn install --check-files"
function ydd() {
  if [[ -z $1 ]]; then
    yarn-deduplicate yarn.lock
  else
    yarn-deduplicate $1
  fi
}

function git_migrate_to_main() {
  git branch -m master main
  git fetch origin
  git branch -u origin/main main
  git remote set-head origin -a
}

alias git_default_branch="git symbolic-ref refs/remotes/origin/HEAD | rg 'refs/remotes/origin/(.+)' -o -r '\$1'"
alias gcom='git checkout $(git_default_branch)'
alias gdm='git diff $(git_default_branch)'
alias gdmno='git diff --relative --name-only $(git_default_branch)'
alias gdnom='git diff --relative --name-only $(git_default_branch)'

alias git_repository_name='basename -s .git $(git config --get remote.origin.url)'

# Worktrees
function gwa() {
  new_branch=$1
  base_branch=$2
  repo_name=$(git_repository_name)

  if [ -z "$base_branch" ]; then
    base_branch=$(git_default_branch)
  fi

  # TODO: FZF worktrees?
  mkdir -p "$HOME/code/worktrees"
  new_worktree_path="$HOME/code/worktrees/${repo_name}__${new_branch}"
  git worktree add -b $new_branch $new_worktree_path $base_branch
  cd $new_worktree_path
}

function point_branch_to_head() {
  local branch_name
  branch_name=$1
  git branch -f $1 HEAD
  git checkout $1
}

# replay all commits, starting at feature_branch exclusive, through
# dependent_feature inclusive onto master
function rebase_dependent() {
  local feature_branch
  feature_branch=$1
  git rebase --onto $(git_default_branch) "${feature_branch}" HEAD
}

function git_set_remote_ssh() {
  local remote_url
  remote_url=$(git remote get-url origin | rg 'github.com/(.*)\.git' -o -r '$1')
  git remote set-url origin "git@github.com:${remote_url}.git"
  git remote set-url --push origin "git@github.com:${remote_url}.git"
}

function gh_close_dependabot_preview_prs() {
  gh api repos/{owner}/{repo}/pulls --paginate | \
    jq '.[] | select(.user.login=="dependabot-preview[bot]") | .number' | \
    xargs -I {} gh api repos/{owner}/{repo}/pulls/{} --method PATCH --raw-field state=closed
}

function osx_notify() {
  title=$1
  message=$2
  osascript -e "display notification \"${message}\" with title \"${title}\""
}

function refresh_clone_urls() {
  temp_file=$(mktemp)
  (
    gh api /user/repos --paginate | \
        jq -r '
          .[]
          | select(.owner.login | test("rperryng*"))
          | select(.archived | not)
          | .ssh_url
        ' > $temp_file && \
        rm --force "$HOME/.clone_urls" && \
        mv $temp_file "$HOME/.clone_urls" \
  ) &
}

if command -v gh &> /dev/null; then
  ws_clone() {
    # In case the file doesn't exist yet
    touch "$HOME/.clone_urls"

    cat "$HOME/.clone_urls" | \
      fzf --multi | \
      xargs -I{} git -C "$HOME/code/wealthsimple" clone {}

    refresh_clone_urls &
  }
fi

function whatsusing() {
  sudo lsof -i -P | grep LISTEN | grep :$1
}

function iswsl() {
  if [[ -f '/proc/version' ]]; then
    grep -qi microsoft '/proc/version' && return
  fi

  false
}

# }}}
# {{{ docker
function select_docker_container_id() {
  local docker_container_ls_output=$(
    docker container ls \
      --format 'table {{.Names}}\t{{.ID}}\t{{.Status}}\t{{.RunningFor}}\t{{.Image}}' \
  )

  echo $docker_container_ls_output \
    | tail -n+2 \
    | fzf --header="$(echo $docker_container_ls_output | head -1)" \
    | grep -oE '\s([a-zA-Z0-9]+)' \
    | head -1 \
    | grep -oE '([a-zA-Z0-9]+)'
}

function dlogs() {
  local container_id=$(select_docker_container_id)
  if [[ -n "${container_id}" ]]; then
    echo "container_id is '${container_id}'"
    docker container logs --follow "${container_id}"
    return
  fi

  false
}

# }}}
# {{{ NNN
export NNN_OPTS="AH"
export NNN_BMS='d:~/Downloads;w:~/code/ws;c:~/code;h:~'
export NNN_NO_AUTOSELECT=1
export NNN_COLORS=4321

if iswsl; then
  export NNN_BMS="a:$(wslpath 'C:\Users\ryanp\home');${NNN_BMS}"
fi
# }}}
# {{{ Secrets
# security add-generic-password \
#   -a "$USER"\
#   -s 'github_token' \
#   -w 'TOKEN_VALUE'
# security delete-generic-password -a "$USER" -s 'github_token'
if [ "$(uname)" = "Darwin" ]; then
  export GITHUB_TOKEN=$(security find-generic-password -a "$USER" -s 'github_token' -w)
fi
# }}}
# {{{ Environment
export DOTFILES_SOURCE="${HOME}/code/dotfiles"

function update_languages() {
  brew update
  brew upgrade ruby-build
  brew upgrade node-build
  # brew upgrade python-build

  function install_latest() {
    local build_tool
    local language_name
    build_tool=$1
    language_name=$2

    echo "updating ${build_tool}"

    latest_version=$(eval "${build_tool} versions | tail -n1 | rg -o '\d+.\d+.\d+'")
    eval "${build_tool} install --skip-existing ${latest_version}"
    eval "${build_tool} global ${latest_version}"
    echo "${latest_version}" >| "${DOTFILES_SOURCE}/.${language_name}-version"
    echo "Using ${language_name} ${latest_version}"
  }

  install_latest 'rbenv' 'ruby'
  install_latest 'nodenv' 'node'
  # install_latest 'pyenv' 'python'
}

# cat .ruby-version | xargs -I {} rbenv install --skip-existing {}
# cat .node-version | xargs -I {} nodenv install --skip-existing {}
# cat .pyenv-version | xargs -I {} pyenv install --skip-existing {}
# }}}
# {{{ bindkey
# emacs insert-mode binds ;)
bindkey -e

# Enable Ctrl-x-e to edit command line
autoload -U edit-command-line
zle -N edit-command-line
bindkey '^xe' edit-command-line
bindkey '^x^e' edit-command-line

# Shouldn't be necessary...
bindkey "^A" beginning-of-line
bindkey "^E" end-of-line
bindkey "^U" backward-kill-line
bindkey "^B" backward-char
bindkey "^F" forward-char

# Vim conventions
bindkey "^P" up-line-or-search
bindkey "^N" down-line-or-search

# FZF binds
bindkey "^Y" fzf-cd-widget
bindkey "^R" fzf-history-widget
bindkey "^T" fzf-file-widget

function yarnWorkspaceFuzzy() {
  local workspaces
  local rcode
  local workspace

  workspaces=$(yarn --json workspaces info)
  rcode=$?
  if [[ ! $rcode -eq 0 ]]; then
    return $rcode
  fi

  workspace=$(
    yarn --json workspaces info \
      | jq '.data' --raw-output \
      | jq 'keys | .[]' --raw-output \
      | fzf --reverse --height '40%'
  )
  rcode=$?
  if [[ ! $ret_code -eq 0 ]]; then
    return $rcode
  fi

  echo $workspace
  return $rcode
}

# Docker container id fuzzy
function docker-container-widget() {
  LBUFFER="${LBUFFER}$(select_docker_container_id)"
  local rcode=$?
  zle reset-prompt
  return $rcode
}
zle -N docker-container-widget
bindkey '^X^D' docker-container-widget

# Yarn workspaces Fuzzy
function yarn-workspace-widget() {
  local workspace
  local rcode
  workspace=$(yarnWorkspaceFuzzy)
  rcode=$?

  if [[ $rcode -eq 0 ]]; then
    BUFFER="yarn workspace '$(yarnWorkspaceFuzzy)' "
    zle end-of-line
  fi
  zle reset-prompt

  return $rcode
}
zle -N yarn-workspace-widget
bindkey '^X^Y' yarn-workspace-widget
# }}}
