# Autoload -Uz compinit
# compinit

# global gitignore
git config --global core.excludesfile ~/.gitignore

# brew install
# ripgrep
# nnn
# rbenv
# nodenv
# pyenv

# http://www.rushiagr.com/blog/2016/06/16/everything-you-need-to-know-about-tmux-copy-pasting-ubuntu/
# https://github.com/dmarcotte/easy-move-resize
# https://github.com/BurntSushi/ripgrep
# https://github.com/jarun/nnn
# https://github.com/rbenv/rbenv
# https://github.com/rupa/z
# https://github.com/scmbreeze/scm_breeze
# https://github.com/tpope/gem-ctags
# https://github.com/tpope/rbenv-ctags
# https://github.com/zsh-users/zsh-autosuggestions
# https://github.com/zsh-users/zsh-syntax-highlighting
# https://github.com/sharkdp/bat

# Enable esc+ to treat option keys as alt
# https://github.com/junegunn/fzf.vim/issues/54#issuecomment-350417085

# Bat theme
export BAT_THEME='gruvbox-dark-hard'

alias rm-swap="rm ~/.local/share/nvim/swap/*"

HISTSIZE=5000               # How many lines of history to keep in memory
HISTFILE=~/.zsh_history     # Where to save history to disk
SAVEHIST=5000               # Number of history entries to save to disk
HISTDUP=erase               # Erase duplicates in the history file
# Immediately append to the history file, not just when a term is killed# Base16
setopt    sharehistory
# Share history across terminals
setopt    appendhistory
# Append history to the history file (no overwriting)
setopt    incappendhistory

# BASE16_SHELL=$HOME/.config/base16-shell/
# [ -n "$PS1" ] && [ -s $BASE16_SHELL/profile_helper.sh ] && eval "$($BASE16_SHELL/profile_helper.sh)"
# base16_onedark

# Use neovim remote terminal if available
if [ -n "$NVIM_LISTEN_ADDRESS" ]; then
  export VISUAL="nvr -cc split --remote-wait +'setlocal bufhidden=wipe'"
  alias nvim="nvr"
  alias n="nvr"
  alias nnstart="echo 'Already in a neovim session'"
else
  export VISUAL=nvim
  alias nv="nvim"
  alias n="nvim"
  alias nnstart="clear; nvim +'call NNStart()'"
fi

if command -v gh &> /dev/null; then
  clone() {
    gh api /user/repos --paginate | \
      jq -r '.[] | .clone_url' | \
      fzf | \
      xargs -I{} git -C "$HOME/code" clone {}
  }
fi

export EDITOR="$VISUAL"

export NNN_BMS='d:~/Downloads;w:~/code/ws;c:~/code;h:~'
export NNN_COPIER="~/.copier.sh"
export NNN_NO_AUTOSELECT=1

# When enter starts inputting ^M...
alias pls="stty sane"

function gcom() {
  if ! git checkout main 2>/dev/null; then
    git checkout master
  fi
}

function git_migrate_to_main() {
  git branch -m master main
  git fetch origin
  git branch -u origin/main main
  git remote set-head origin -a
}

# Git aliases
alias glo="git log --oneline"
alias gcmsg="git commit -m"
alias gcane="git commit --amend --no-edit"
alias gcam="git commit --amend -m"
alias gdm="git diff --stat --color master..\$(git symbolic-ref --short -q HEAD)"
alias g_branch="git symbolic-ref --short -q HEAD"
alias gcne="git commit --no-edit"

# Push new local branch to remote under the same name
alias gpsu="git push -u origin \$(git symbolic-ref --short -q HEAD)"

# Open the PR page for the current branch.
alias open-pr="open \"https://github.com/wealthsimple/\$(basename \$(git remote get-url origin) .git)/compare/\$(git symbolic-ref --short -q HEAD)?expand=1\""

# gh cli aliases
alias ghrw="gh run watch -i1"
alias ghrvw="gh run view --web"
alias ghprvw="gh pr view --web"

alias rm_postgres_lockfile="rm /usr/local/var/postgres/postmaster.pid"

alias be="bundle exec"
alias migrate="bundle exec rake db:migrate && RACK_ENV=test bundle exec rake db:migrate"
alias rollback="bundle exec rake db:rollback && RACK_ENV=test bundle exec rake db:rollback"
alias db-rebuild="git checkout master -- db/schema.rb && bundle exec rake db:drop db:create db:migrate && RACK_ENV=test bundle exec rake db:migrate"

# Rubocop all git-tracked files (excluding files in the db/ folder)
alias cop="git ls-files | xargs ls -1 2>/dev/null | grep '\.rb$' | grep -v '^db\/' | xargs bundle exec rubocop"
alias coppa="git ls-files | xargs ls -1 2>/dev/null | grep '\.rb$' | grep -v '^db\/' | xargs bundle exec rubocop -a"
alias coppa="bundle exec rubocop -a"

# Jump to repository root
alias cdp='cd $(git rev-parse --show-toplevel)'

# replay all commits, starting at feature_branch exclusive, through
# dependent_feature inclusive onto master
function rebase_dependent() {
  # $1 = feature_branch
  # $2 = dependent branch
  git rebase --onto master $1 $(g_branch)
}

function git_set_remote_ssh() {
  remote_url=$(git remote get-url origin | rg 'github.com/(.*)\.git' -o -r '$1')
  git remote set-url origin "git@github.com:${remote_url}.git"
  git remote set-url --push origin "git@github.com:${remote_url}.git"
}

# case `uname` in
#   Darwin)
#     alias ls="gls -G"
#   ;;
# esac

export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
export FZF_CTRL_T_COMMAND="${FZF_DEFAULT_COMMAND}"

# security add-generic-password \
#   -a "$USER"\
#   -s 'github_token' \
#   -w 'TOKEN_VALUE'
# security delete-generic-password -a "$USER" -s 'github_token'
export GITHUB_TOKEN=$(security find-generic-password -a "$USER" -s 'github_token' -w)


# emacs insert-mode binds ;)
bindkey -e

# Enable Ctrl-x-e to edit command line
autoload -U edit-command-line
zle -N edit-command-line
bindkey '^xe' edit-command-line
bindkey '^x^e' edit-command-line

# Shouldn't be necessary...
bindkey "^A" beginning-of-line
bindkey "^E" end-of-line
bindkey "^U" backward-kill-line
bindkey "^B" backward-char
bindkey "^F" forward-char

# Vim conventions
bindkey "^P" up-line-or-search
bindkey "^N" down-line-or-search

# FZF binds
bindkey "^Y" fzf-cd-widget
bindkey "^R" fzf-history-widget
bindkey "^T" fzf-file-widget
